FROM debian:bullseye

# # which spack version are we using now? Default is develop
# # but other strings can be given to the docker build command
# # (for example docker build --build-arg SPACK_VERSION=v0.16.2)
ARG SPACK_VERSION=develop
RUN echo "Building with spack version ${SPACK_VERSION}"

# Any extra packages to be installed in the host
ARG EXTRA_PACKAGES
RUN echo "Installing EXTRA_PACKAGES ${EXTRA_PACKAGES} on container host"

# general environment for docker
ENV SPACK_ROOT=/home/user/spack \
	  SPACK=/home/user/spack/bin/spack \
    FORCE_UNSAFE_CONFIGURE=1

RUN apt-get -y update
# Convenience tools
# RUN apt-get -y install wget time nano vim emacs git

#RUN apt list --installed > packages-before.txt
#RUN apt-get -y install ${EXTRA_PACKAGES}
#RUN apt remove -y ${EXTRA_PACKAGES}
#RUN apt list --installed > packages-after.txt

# Does autoremove break the compilation?
#RUN apt autoremove -y


# at this point, we do not depend on ${EXTRA_PACKAGES}, but maybe on dependencies of
# of those?
#
# From https://github.com/ax3l/dockerfiles/blob/master/spack/base/Dockerfile:
# install minimal spack dependencies
RUN apt-get install -y --no-install-recommends \
              autoconf \
              build-essential \
              ca-certificates \
              coreutils \
              curl \
              environment-modules \
              gfortran \
              git \
              openssh-server \
              python \
              unzip \
              vim \
            && rm -rf /var/lib/apt/lists/*


# load spack environment on login
RUN echo "source $SPACK_ROOT/share/spack/setup-env.sh" \
           > /etc/profile.d/spack.sh

# # OOMMF cannot be built as root user.
RUN adduser user
USER user
WORKDIR /home/user

# # install spack
# RUN mkdir $SPACK_ROOT
# RUN        curl -s -L https://github.com/llnl/spack/archive/develop.tar.gz \
#            | tar xzC $SPACK_ROOT --strip 1
# note: at this point one could also run ``spack bootstrap`` to avoid
#       parts of the long apt-get install list above


#
# install spack
RUN git clone https://github.com/spack/spack.git
# default branch is develop
RUN cd spack && git checkout $SPACK_VERSION

# # show which version we use
RUN $SPACK --version
#

# build OOMMF
RUN mkdir $SPACK_ROOT/var/spack/repos/builtin/packages/oommf
COPY spack/package.py $SPACK_ROOT/var/spack/repos/builtin/packages/oommf
RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack spec oommf
RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack install tk

USER root

RUN apt-get update -y

RUN apt-get install -y --no-install-recommends\
# binutils\
# binutils-common\
# binutils-x86-64-linux-gnu\
# build-essential\
# bzip2\
# cpp\
# cpp-10\
# dirmngr\
# dpkg-dev\
# fakeroot\
# fontconfig-config\
# fonts-dejavu-core\
# g++\
# g++-10\
# gcc\
# gcc-10\
# gnupg\
# gnupg-l10n\
# gnupg-utils\
# gpg\
# gpg-agent\
# gpg-wks-client\
# gpg-wks-server\
# gpgconf\
# gpgsm\
# libalgorithm-diff-perl\
# libalgorithm-diff-xs-perl\
# libalgorithm-merge-perl\
# libasan6\
# libassuan0\
# libatomic1\
# libbinutils\
# libbrotli-dev\
# libbrotli1\
# libbsd0\
# libc-dev-bin\
# libc-devtools\
# libc6-dev\
# libcc1-0\
# libcrypt-dev\
# libctf-nobfd0\
# libctf0\
# libdeflate0\
# libdpkg-perl\
# libdrm-amdgpu1\
# libdrm-common\
# libdrm-intel1\
# libdrm-nouveau2\
# libdrm-radeon1\
# libdrm2\
# libedit2\
# libelf1\
# libexpat1\
# libexpat1-dev\
# libfakeroot\
# libfile-fcntllock-perl\
# libfontconfig-dev\
# libfontconfig1\
# libfontconfig1-dev\
# libfontenc1\
# libfreetype-dev\
# libfreetype6\
# libfreetype6-dev\
# libgcc-10-dev\
# libgd3\
# libgdbm-compat4\
# libgdbm6\
# libgl1\
# libgl1-mesa-dri\
# libglapi-mesa\
# libglib2.0-0\
# libglib2.0-data\
# libglvnd0\
# libglx-mesa0\
# libglx0\
# libgomp1\
# libgpm2\
# libice6\
# libicu67\
# libisl23\
# libitm1\
# libjbig0\
# libjpeg62-turbo\
# libksba8\
# libldap-2.4-2\
# libldap-common\
# libllvm11\
# liblocale-gettext-perl\
# liblsan0\
# libmd0\
# libmpc3\
# libmpfr6\
# libncursesw6\
# libnpth0\
# libnsl-dev\
# libpciaccess0\
# libperl5.32\
# libpng-dev\
# libpng-tools\
  libpng16-16\
  libpthread-stubs0-dev\
  libquadmath0\
  libreadline8\
  libsasl2-2\
  libsasl2-modules\
  libsasl2-modules-db\
  libsensors-config\
  libsensors5\
  libsm6\
  libsqlite3-0\
  libstdc++-10-dev\
  libtcl8.6\
  libtiff5\
  libtirpc-dev\
  libtk8.6\
  libtsan0\
  libubsan1\
  libutempter0\
  libvulkan1\
  libwayland-client0\
  libwebp6\
  libx11-6\
  libx11-data\
  libx11-dev\
  libx11-xcb1\
  libxau-dev\
  libxau6\
  libxaw7\
  libxcb-dri2-0\
  libxcb-dri3-0\
  libxcb-glx0\
  libxcb-present0\
  libxcb-randr0\
  libxcb-shape0\
  libxcb-shm0\
  libxcb-sync1\
  libxcb-xfixes0\
  libxcb1\
  libxcb1-dev\
  libxcomposite1\
  libxdamage1\
  libxdmcp-dev\
  libxdmcp6\
  libxext-dev\
  libxext6\
  libxfixes3\
  libxft-dev\
  libxft2\
  libxi6\
  libxinerama1\
   libxkbfile1\
   libxml2\
   libxmu6\
   libxmuu1\
   libxpm4\
   libxrandr2\
   libxrender-dev\
   libxrender1\
   libxshmfence1\
   libxss-dev\
   libxss1\
   libxt6\
   libxtst6\
   libxv1\
   libxxf86dga1\
   libxxf86vm1\
   libz3-4\
   linux-libc-dev\
   make\
   manpages\
   manpages-dev\
   mesa-vulkan-drivers\
   netbase\
   patch\
   perl\
   perl-modules-5.32\
    pinentry-curses\
    pkg-config\
    readline-common\
    sensible-utils\
    shared-mime-info
###    tcl\
###    tcl-dev \
###    tcl8.6\
###    tcl8.6-dev
#     tk\
#    tk8.6\
#    tk8.6-dev\
#    ucf\
#    uuid-dev\
#    x11-common\
#    x11-utils\
#    x11proto-core-dev\
#    x11proto-dev\
#    x11proto-scrnsaver-dev\
#    x11proto-xext-dev\
#    xbitmaps\
#    xdg-user-dirs\
#    xorg-sgml-doctools\
#    xterm\
#    xtrans-dev\
#    xz-utils\
#    zlib1g-dev

# CMD /bin/bash -l

USER user
RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack install --verbose oommf
  

# # # Run spack smoke tests for oommf
RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack test run --alias oommftest oommf
RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack test results -l oommftest 
# 
# Run OOMMF example in container
RUN mkdir mif-examples
COPY --chown=user:user mif-examples/* mif-examples/
RUN ls -l mif-examples
# # # 
RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack load oommf && oommf.tcl boxsi +fg mif-examples/stdprob3.mif -exitondone 1
# 
# # Show that we do not depend on debian package tk-dev for execution of OOMMF
# 
# # USER root
# # RUN apt emove -y ${EXTRA_PACKAGES}
# # USER user
# # RUN . $SPACK_ROOT/share/spack/setup-env.sh && spack load oommf && oommf.tcl boxsi +fg mif-examples/stdprob3.mif -exitondone 1
# 
CMD /bin/bash -l

